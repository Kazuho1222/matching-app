generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  name             String
  password         String
  image            String?
  gender           Gender
  birthDate        DateTime
  interests        String[]  @default([])
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  emailVerified    DateTime?
  sentLikes        Like[]    @relation("SentLikes")
  receivedLikes    Like[]    @relation("ReceivedLikes")
  matches          Match[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  profile          Profile?
}

model Profile {
  id         String   @id @default(cuid())
  userId     String   @unique
  height     Int?
  bodyType   String?
  smoking    Boolean?
  drinking   Boolean?
  education  String?
  income     String?
  lookingFor String?
  photos     String[]
  hobbies    String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  id         String   @id @default(cuid())
  fromUserId String
  toUserId   String
  createdAt  DateTime @default(now())
  fromUser   User     @relation("SentLikes", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser     User     @relation("ReceivedLikes", fields: [toUserId], references: [id], onDelete: Cascade)

  @@unique([fromUserId, toUserId])
}

model Match {
  id        String    @id @default(cuid())
  user1Id   String
  user2Id   String
  createdAt DateTime  @default(now())
  user1     User      @relation(fields: [user1Id], references: [id], onDelete: Cascade)
  messages  Message[]

  @@unique([user1Id, user2Id])
}

model Message {
  id         String   @id @default(cuid())
  content    String
  matchId    String
  fromUserId String
  toUserId   String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  fromUser   User     @relation("SentMessages", fields: [fromUserId], references: [id], onDelete: Cascade)
  match      Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  toUser     User     @relation("ReceivedMessages", fields: [toUserId], references: [id], onDelete: Cascade)
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
